# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
  # aws-ecs: circleci/aws-ecs@2.2.1
  # aws-cloudformation: orbss/aws-cloudformation@0.1.6
  aws-cli: circleci/aws-cli@2.0.3
jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            
            cp TechChallengeApp dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            
            cp TechChallengeApp dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .
            
            cp TechChallengeApp.exe dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .
            
            cp TechChallengeApp.exe dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output

  deploy-cfn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy Cloudformation Template - vpc-2azs.yaml
          command: |
            aws cloudformation deploy --template cfn/vpc-2azs.yaml --stack stack1-vpc
      - run:
          name: Deploy Cloudformation Template - client-sg.yaml
          command: |
            aws cloudformation deploy --template cfn/client-sg.yaml --stack stack2-clientsg
      - run:
          name: Deploy Cloudformation Template - rds-postgres.yaml
          command: |
            aws cloudformation deploy --template cfn/rds-postgres.yaml --stack stack3-rds
      - run:
          name: Deploy Cloudformation Template - cluster.yaml
          command: |
            aws cloudformation deploy --template cfn/cluster.yaml --stack stack4-cluster
      - run:
          name: Deploy Cloudformation Template - service-cluster-alb.yaml
          command: |
            aws cloudformation deploy --template cfn/service-cluster-alb.yaml --stack stack5-service-alb --capabilities CAPABILITY_NAMED_IAM --parameter-overrides AppImage='${AWS_ECR_ACCOUNT_URL}'/'${MY_APP_PREFIX}':'${CIRCLE_SHA1}'

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
  docker-build-push-ecr:
    jobs:
      - aws-ecr/build-and-push-image:
          context: aws_circleci
          region: AWS_DEFAULT_REGION
          create-repo: true
          no-output-timeout: 20m
          path: .
          repo: '${MY_APP_PREFIX}'
          tag: '${CIRCLE_SHA1}'
  deploy-cfn:
    jobs:
      - deploy-cfn:
          context: aws_circleci
          

      
      # - aws-ecs/deploy-service-update:
      #     context: aws_circleci
      #     cluster-name: 'step2-cluster-apptest-Cluster-imTm2jpRjzkv'
      #     service-name: '${MY_APP_PREFIX}-service'
      #     family: '${MY_APP_PREFIX}-family'
      #     container-image-name-updates: 'container=${MY_APP_PREFIX}-container,tag=${CIRCLE_SHA1}'
      #     requires:
      #       - aws-ecr/build-and-push-image
