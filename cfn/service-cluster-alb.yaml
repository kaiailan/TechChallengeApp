---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fargate: service that runs on a Fargate cluster based on fargate/cluster.yaml and uses the cluster ALB template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClusterStack
      - ParentDBClientStack
      - ParentDBServiceStack
    - Label:
        default: 'Task Parameters'
      Parameters:
      - MyAppPrefix
      - AppImage
      - AppEnvironment1Value
      - AppEnvironment2Value
      - AppEnvironment3Value
      - AppEnvironment4Value
      - AppEnvironment5Value
      - AppEnvironment6Value
    - Label:
        default: 'Database Parameters'
      Parameters:
      - DBTableInit
    - Label:
        default: 'Service Parameters'
      Parameters:
      - Cpu
      - Memory
      - SubnetsReach
      - AutoScaling
      - DesiredCount
      - MaxCapacity
      - MinCapacity
      - HealthCheckGracePeriod
      - LogsRetentionInDays
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on fargate/cluster.yaml template.'
    Type: String
  ParentDBServiceStack:
    Description: 'Stack name of parent DB Service Security Group stack based on state/rds-postgres.yaml template to get database endpoint-DNSName.'
    Type: String
  ParentDBClientStack:
    Description: 'Stack name of parent Client Security Group stack based on state/client-sg.yaml template to allow network access from the service to Database.'
    Type: String
  LoadBalancerPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  LoadBalancerPathPattern:
    Description: 'Optional path pattern. Specify LoadBalancerPathPattern and/or LoadBalancerHostPattern.'
    Type: String
    Default: '/*'
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  MyAppPrefix:
    Description: 'The mirror of MY_APP_PREFIX in CircleCI.'
    Type: String
    Default: techchallengeapp
  AppImage:
    Description: 'The Docker image to use for the app container. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String
  # AppCommand:
  #   Description: 'Optional commands (comma-delimited) used when starting the app container.'
  #   Type: String
  #   Default: 'serve'
  AppPort:
    Description: 'The port exposed by the app container that receives traffic from the load balancer (AppPort).'
    Type: Number
    Default: 3000
    MinValue: 1
    MaxValue: 49150
  AppEnvironment1Value:
    Description: 'Optional environment variable 1 value for VTT_DBUSER.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: techchallengeapp-VTT_DBUSER
    NoEcho: true
  AppEnvironment2Value:
    Description: 'Optional environment variable 2 value for VTT_DBPASSWORD.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: techchallengeapp-VTT_DBPASSWORD
    NoEcho: true
  AppEnvironment3Value:
    Description: 'Optional environment variable 3 value for VTT_DBNAME.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: techchallengeapp-VTT_DBNAME
    NoEcho: true
  AppEnvironment4Value:
    Description: 'Optional environment variable 4 value for VTT_DBPORT.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: techchallengeapp-VTT_DBPORT
    NoEcho: true
  AppEnvironment5Value:
    Description: 'Optional environment variable 5 value for VTT_LISTENHOST.'
    Type: String
    Default: 0.0.0.0
  AppEnvironment6Value:
    Description: 'Optional environment variable 6 value for VTT_LISTENPORT.'
    Type: String
    Default: 3000
  DBTableInit:
    Description: 'Initialise database table and demo records?'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  Cpu:
    Description: 'The minimum number of CPUs to reserve for the container.'
    Type: Number
    Default: 256
  Memory:
    Description: 'The amount of memory used by the task.'
    Type: Number
    Default: 512
  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  SubnetsReach:
    Description: 'Should the service have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Public
    AllowedValues:
    - Public
    - Private
  AutoScaling:
    Description: 'Scale number of tasks based on CPU load?'
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  HealthCheckGracePeriod:
    Description: 'The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.'
    Type: Number
    Default: 60
    MinValue: 0
    MaxValue: 1800
Conditions:
  HasLoadBalancerPathPattern: !Not [!Equals [!Ref LoadBalancerPathPattern, '']]
  HasSubnetsReachPublic: !Equals [!Ref SubnetsReach, Public]
  HasAutoScaling: !Equals [!Ref AutoScaling, 'true']
  # HasAppCommand: !Not [!Equals [!Ref AppCommand, '']]
  HasDBTableInit: !Equals [!Ref DBTableInit, 'true']
Resources:
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/healthcheck/' # containers checkpoint
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 3000 # containers port
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  LoadBalancerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - !Sub '${LoadBalancerPathPattern}'
      ListenerArn: {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpListener'}
      Priority: !Ref LoadBalancerPriority
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: deployment-example-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
      - Name: !Sub '${MyAppPrefix}-container'
        Image: !Ref AppImage
        EntryPoint:
          # Normal startup
          - "./TechChallengeApp"
          - "serve"
        # Command: !If [HasAppCommand, !Split [',', !Ref AppCommand], !Ref 'AWS::NoValue']
        PortMappings:
        - ContainerPort: !Ref AppPort
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': !Ref LogGroup
            'awslogs-stream-prefix': !Sub '${MyAppPrefix}-container'
        Environment:
        - Name: VTT_DBHOST
          Value: {'Fn::ImportValue': !Sub '${ParentDBServiceStack}-DNSName'}
        - Name: VTT_DBUSER
          Value: !Ref AppEnvironment1Value
        - Name: VTT_DBPASSWORD
          Value: !Ref AppEnvironment2Value
        - Name: VTT_DBNAME
          Value: !Ref AppEnvironment3Value
        - Name: VTT_DBPORT
          Value: !Ref AppEnvironment4Value
        - Name: VTT_LISTENHOST
          Value: !Ref AppEnvironment5Value
        - Name: VTT_LISTENPORT
          Value: !Ref AppEnvironment6Value
        DependsOn:
        - !If [HasDBTableInit, {ContainerName: !Sub '${MyAppPrefix}-dbinit-container', Condition: COMPLETE}, !Ref 'AWS::NoValue']
      - !If
        - HasDBTableInit
        - Name: !Sub '${MyAppPrefix}-dbinit-container'
          Image: !Ref AppImage
          EntryPoint:
            # Data table init
            - "./TechChallengeApp"
            - "updatedb"
            - "-s"
          Essential: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref LogGroup
              'awslogs-stream-prefix': !Sub '${MyAppPrefix}-dbinit-container'
          Environment:
          - Name: VTT_DBHOST
            Value: {'Fn::ImportValue': !Sub '${ParentDBServiceStack}-DNSName'}
          - Name: VTT_DBUSER
            Value: !Ref AppEnvironment1Value
          - Name: VTT_DBPASSWORD
            Value: !Ref AppEnvironment2Value
          - Name: VTT_DBNAME
            Value: !Ref AppEnvironment3Value
          - Name: VTT_DBPORT
            Value: !Ref AppEnvironment4Value
        - !Ref 'AWS::NoValue'
      Cpu: !Ref Cpu
      ExecutionRoleArn: !Ref TaskExecutionRole
      Family: !Sub '${MyAppPrefix}-family'
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-service'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress:
      - SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerSecurityGroup'}
        FromPort: !Ref AppPort
        ToPort: !Ref AppPort
        IpProtocol: tcp
  Service:
    DependsOn: LoadBalancerListenerRule
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub '${MyAppPrefix}-service'
      CapacityProviderStrategy:
      - Base: 0
        CapacityProvider: FARGATE
        Weight: 1
      Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: true
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LoadBalancers:
      - ContainerName: !Sub '${MyAppPrefix}-container'
        ContainerPort: !Ref AppPort
        TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [HasSubnetsReachPublic, ENABLED, DISABLED]
          SecurityGroups:
          - !Ref ServiceSecurityGroup
          - {'Fn::ImportValue': !Sub '${ParentDBClientStack}-ClientSecurityGroup'}
          Subnets: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-Subnets${SubnetsReach}'}]
      PlatformVersion: '1.4.0'
      TaskDefinition: !Ref TaskDefinition

  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Condition: HasAutoScaling
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: AmazonEC2ContainerServiceAutoscaleRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Condition: HasAutoScaling
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
  CPUUtilizationHighAlarm:
    Condition: HasAutoScaling
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 60
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Condition: HasAutoScaling
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30
      AlarmActions:
      - !Ref ScaleDownPolicy
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  URL:
    Description: 'URL to the ECS cluster'
    Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-URL'}
  AppPrefix:
    Description: 'MyAppPrefix.'
    Value: !Ref MyAppPrefix
  AppImage:
    Description: 'App image name.'
    Value: !Ref AppImage
  Cluster:
    Description: 'Cluster name.'
    Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
  ServiceName:
    Description: 'Service name.'
    Value: !Sub '${MyAppPrefix}-service'
  TaskFamily:
    Description: 'Task family name.'
    Value: !Sub '${MyAppPrefix}-family'
  ContainerName:
    Description: 'Container name.'
    Value: !Sub '${MyAppPrefix}-container'
